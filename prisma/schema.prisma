generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Issue {
  id                Int              @id @default(autoincrement())
  title             String           @db.VarChar(255)
  description       String           @db.Text
  status            Status           @default(OPEN)
  registerBy        CompanyEmployee? @relation(fields: [companyEmployeeId], references: [id])
  companyEmployeeId Int?
  asignedTo         ServiceEmployee? @relation(fields: [serviceEmployeeId], references: [id]) 
  serviceEmployeeId Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Company {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(255)
  CompanyEmployees CompanyEmployee[]
}

model CompanyEmployee {
  id               Int      @id @default(autoincrement())
  firstName        String   @db.VarChar(50)
  lastName         String   @db.VarChar(50)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  registeredIssues Issue[]
  company          Company  @relation(fields: [companyId], references: [id])
  companyId        Int
}

model ServiceEmployee {
  id            Int      @id @default(autoincrement())
  firstName     String   @db.VarChar(50)
  lastName      String   @db.VarChar(50)
  asignedIssues Issue[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String? 
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
